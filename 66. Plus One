66. Plus One (Topics: Array, Math)

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.


Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].

Example 3:
Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.

----------------------

Clarifying Questions/Callouts/Notes: ?

----------------------

Test Cases:

Input: digits = [1,1,9]
Expected: [1,2,0]

Input: nums = digits = [9,9]
Expected: [1,0,0]

----------------------

// Swift:
class Solution {
    func plusOne(_ digits: [Int]) -> [Int] {
        var incrementedDigits: [Int] = []
        
        // 3 cases:
      // 1. Simple 123 -> 124
      // 2. Carry Over: 119 -> 120
      // 3. Needs prepend: 99 -> 100
        
        var needsCarryOver: Bool = true
        
        for idx in stride(from: digits.count - 1, through: 0, by: -1) { // O(n)
            let digit = digits[idx]
            if needsCarryOver {
                if digit == 9 {
                    incrementedDigits.append(0)
                } else {
                    incrementedDigits.append(digit+1)
                    needsCarryOver = false
                }
            } else {
                incrementedDigits.append(digit)
            }
        }
        
        if needsCarryOver {
            incrementedDigits.append(1)
        }
        incrementedDigits.reverse() // O(n)
        return incrementedDigits // Final Time Complexity: O(n)
    }
}
