336. Palindrome Pairs (Topics: Array, Hash Table, String, Trie)

You are given a 0-indexed array of unique strings words.

A palindrome pair is a pair of integers (i, j) such that:
- 0 <= i, j < words.length,
- i != j, and
- words[i] + words[j] (the concatenation of the two strings) is a palindrome

Return an array of all the palindrome pairs of words.

You must write an algorithm with O(sum of words[i].length) runtime complexity.


Example 1:
Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are ["abcddcba","dcbaabcd","slls","llssssll"]

Example 2:
Input: words = ["bat","tab","cat"]
Output: [[0,1],[1,0]]
Explanation: The palindromes are ["battab","tabbat"]

Example 3:
Input: words = ["a",""]
Output: [[0,1],[1,0]]
Explanation: The palindromes are ["a","a"]
 

Constraints:
1 <= words.length <= 5000
0 <= words[i].length <= 300
words[i] consists of lowercase English letters.

----------------------

Clarifying Questions/Callouts/Notes:  What can I assume about the elements in words? 

Does casing matter? Will there be empty strings? 
Anything I can assume about the length of each String element in words? 
What should I do if words is an empty list? 
What should I do if words only contains one String element (cannot form a pair)? 
Can I form a pair with itself (aka "a" forms a palindrome with itself)? 
Are the elements in words unique/guaranteed no duplicates?

----------------------

Examples:
        // case 1: exact reverse present => 2 pairs; ex: abcd & dcba -> abcd+dbca, dcba+abcd
        // case 2: empty string + palindrome => 2 pairs; ex: nurun & "" -> nurun+"", ""+nurun ~> IN THIS CASE, WE ONLY CARE IF CURRENT WORD IS PALINDROME TO AVOID LIST SEARCH. WE WILL HANDLE BOTH CASES OF CONCAT TO BEG/END THEN
        // case 3: middle of palindrome formed is beginning of one word => 1 pair; ex: run & nu -> nu+run
        // case 4: middle of palindrome formed is end of one word => 1 pair; ex: race & car -> race+car
        // case 3 & 4: aaa & aa -> aaa+aa, aa+aaa

----------------------

Additional Test Cases / Trivial Cases / Edge Cases: 

Input: words = ["a","b","c","ab","ac","aa"]
Expected: [[1,0],[0,1],[3,2],[2,4]]

Input: words = [""]
Expected: []

----------------------

Swift:
class Solution {
    func palindromePairs(_ words: [String]) -> [[Int]] {
        // Clarifying questions: 
        // 1. What can I assume about the elements in words? Does casing matter? Will there be empty strings? Anything I can assume about the length of each String element in words? What should I do if words is an empty list? What should I do if words only contains one String element (cannot form a pair)? Can I form a pair with itself (aka "a" forms a palindrome with itself)? Are the elements in words unique/guaranteed no duplicates?

        // Examples:
        // case 1: exact reverse present => 2 pairs; ex: abcd & dcba -> abcd+dbca, dcba+abcd
        // case 2: empty string + palindrome => 2 pairs; ex: nurun & "" -> nurun+"", ""+nurun ~> IN THIS CASE, WE ONLY CARE IF CURRENT WORD IS PALINDROME TO AVOID LIST SEARCH. WE WILL HANDLE BOTH CASES OF CONCAT TO BEG/END THEN
        // case 3: middle of palindrome formed is beginning of one word => 1 pair; ex: run & nu -> nu+run
        // case 4: middle of palindrome formed is end of one word => 1 pair; ex: race & car -> race+car
        // case 3 & 4: aaa & aa -> aaa+aa, aa+aaa

        // trivial/edge case:
        guard words.count > 1 else { return [] }

        // Create dictionary of reversedWords provided guarantee of unique String elements in words
        var reversedWords: [String: Int] = Dictionary<String, Int>() // [String: Int]()
        for (idx, word) in words.enumerated() {
            let reverse = String(word.reversed())
            reversedWords[reverse] = idx
            // bonus tip: empty strings are valid keys for hashtable/hashmap/dictionary in Swift
        }

        // array of valid palindrome pairs to return
        var validPairs: [[Int]] = []
        
        // for each word in words, cover all cases 1 through 4
        for (idx, word) in words.enumerated() {
            if word.isEmpty {
                continue
            }
            if isPalindrome(word, startIdx: 0, endIdx: word.count-1) {
                // word itself is palindrome => can form palindrome pair w empty string
                if let emptyStrIdx = reversedWords[""] {
                    validPairs.append([idx, emptyStrIdx])
                    validPairs.append([emptyStrIdx, idx])
                }
            } else if let exactReverseIdx = reversedWords[word], exactReverseIdx != idx {
                // exactReverse exists/present && is NOT itself (aka word is palindrome) => only true provided a valid palindrome pair (i, j) means i =/= j
                validPairs.append([exactReverseIdx, idx])
                // We ONLY NEED to do this ONCE => the exactReverse will get the other combo e.g. (idx, exactReverseIdx)
            }
            for i in 1..<word.count {
                if isPalindrome(word, startIdx: i, endIdx: word.count-1) {
                    // middle of palindrome formed is end of word
                    // check for reverse of beginning of word
                    let remainingSubstr = word.prefix(i) // word[..<i] if i is String.Index
                    let remainingStr = String(remainingSubstr)
                    if let foundIdx = reversedWords[remainingStr] {
                        validPairs.append([idx, foundIdx])
                    }
                }
                if isPalindrome(word, startIdx: 0, endIdx: word.count-1-i) {
                    // middle of palindrome formed is beginning of word
                    // check for reverse of end of word
                    let remainingSubstr = word.suffix(i) // word[i...] if i is String.Index
                    let remainingStr = String(remainingSubstr)
                    if let foundIdx = reversedWords[remainingStr] {
                        validPairs.append([foundIdx, idx])
                    }
                }
            }
        }
        return validPairs
    }

    private func isPalindrome(_ word: String, startIdx: Int, endIdx: Int) -> Bool {
        let characters = Array(word.lowercased())
        var beg = startIdx
        var end = endIdx
        while beg < end {
            if characters[beg] != characters[end] {
                return false
            }
            beg += 1
            end -= 1
        }
        return true
    }
}
