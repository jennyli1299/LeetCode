67. Add Binary (Topics: Math, String, Bit Manipulation, Simulation)

Given two binary strings a and b, return their sum as a binary string.


Example 1:
Input: a = "11", b = "1"
Output: "100"

Example 2:
Input: a = "1010", b = "1011"
Output: "10101"
 

Constraints:
1 <= a.length, b.length <= 10^4
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.

----------------------

Clarifying Questions/Callouts/Notes: Can we make any assumptions about the lengths of strings a & b? (eg same length?) -> No. The lengths of a & b are variable and there is no guarantee that they are the same length.

----------------------

Test Cases:

Input: a = "11", b = "1"
Expected: "100"

Input: a = "1010", b = "1011"
Expected: "10101"

----------------------

// Swift:
class Solution {
    func addBinary(_ a: String, _ b: String) -> String {
        // trivial case
        if a.isEmpty {
          return b
        } else if b.isEmpty {
          return a
        }

        // two string representations of a & b such that they are same length => fill in leading zeros
        var leading0a = a
        var leading0b = b

        if a.count > b.count {
            leading0b = String(repeating: "0", count: a.count - b.count) + b
        } else if a.count < b.count {
            leading0a = String(repeating: "0", count: b.count - a.count) + a
        }

        var binarySumStr = ""
        var needsCarryOver: Bool = false

        // O(N)
        for (aDigit, bDigit) in zip(Array(leading0a), Array(leading0b)).reversed() {
            switch (aDigit, bDigit, needsCarryOver) {
                case ("0", "0", false):
                    binarySumStr = "0" + binarySumStr
                    // needsCarryOver stays false
                case ("1", "0", false), ("0", "1", false), ("0", "0", true):
                    binarySumStr = "1" + binarySumStr
                    needsCarryOver = false
                case ("1", "1", false), ("1", "0", true), ("0", "1", true):
                    binarySumStr = "0" + binarySumStr
                    needsCarryOver = true
                case ("1", "1", true):
                    binarySumStr = "1" + binarySumStr
                    // needsCarryOver stays true
                default:
                    return "" // SHOULD NEVER HAPPEN
            }
        }

        if needsCarryOver {
          binarySumStr = "1" + binarySumStr
        }
        return binarySumStr // Final time complexity: O(N)
    }
}
