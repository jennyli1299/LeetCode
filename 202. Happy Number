202. Happy Number (Topics: Math, Hash Table, Two Pointers)

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.


Example 1:
Input: n = 19
Output: true
Explanation:
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

Example 2:
Input: n = 2
Output: false
 

Constraints:
1 <= n <= (2^31) - 1

----------------------

Clarifying Questions/Callouts/Notes: ?

----------------------

Additional Test Cases / Edge Cases: 

Input: n = 0
Expected: false

----------------------

Swift:
class Solution {
    func isHappy(_ n: Int) -> Bool {
        var seen = Set<Int>()

        return isHappy(n, &seen)
    }

    func isHappy(_ n: Int, _ seen: inout Set<Int>) -> Bool {
        if n == 1 { 
            return true 
        } else if seen.contains(n) {
            return false
        } else {
            seen.insert(n)
        }

        // let digits = String(n).compactMap { Int(String($0)) }
        let sumSqDigits = String(n).compactMap(\.wholeNumberValue).reduce(0, { x,y in
        x + y*y })

        return isHappy(sumSqDigits, &seen)
    }
}
