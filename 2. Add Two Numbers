2. Add Two Numbers [Medium] (Topics: Linked List, Math, Recursion)

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
  2 -> 4 -> 3
  5 -> 6 -> 4
  -----------
  7 -> 0 -> 8
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


Constraints:
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

----------------------

Clarifying Questions/Callouts/Notes: Can either linked list argument be empty? No, bc guaranteed number of nodes in each linked list is between 1 and 100 inclusive. But in the case that it is possible, return nil.

----------------------

Additional Test Cases / Edge Cases:

Input: l1 = nil, l2 = nil
Expected: nil

----------------------

// Swift:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */
// RECURSIVE SOLUTION
class Solution {
    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {
        return addTwoNumbers(l1, l2, carryOver:0)
    }

    private func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?, carryOver: Int) -> ListNode? {
        // trivial case
        if l1 == nil && carryOver == 0 { return l2 }
        if l2 == nil && carryOver == 0 { return l1 }

        let sum = (l1?.val ?? 0) + (l2?.val ?? 0) + carryOver
        return ListNode(sum % 10, addTwoNumbers(l1?.next, l2?.next, carryOver: sum / 10))
    }
}
