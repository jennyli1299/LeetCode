21. Merge Two Sorted Linked Lists (Topics: Linked List, Recursion)

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
 

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = []
Output: []

Example 3:
Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

----------------------

Clarifying Questions/Comments: If list1 and list2 are in non-decreasing order, listNodes or values may not be unique. (AKA duplicate values may exist) Is there a requirement for which list we should pull from in this scenario?

----------------------

Test Cases:

Input: list1 = [1,2,4], list2 = [1,3,4]
Expected: [1,1,2,3,4,4]

Input: list1 = [], list2 = []
Expected: []

Input: list1 = [], list2 = [0]
Expected: []

----------------------

Swift:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */

class Solution {
    func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -> ListNode? {
        guard let list1Val = list1?.val, let list1Node = list1 else { return list2 }
        guard let list2Val = list2?.val, let list2Node = list2 else { return list1 }
        if list1Val < list2Val {
            list1Node.next = mergeTwoLists(list1Node.next, list2)
            return list1Node
        } else {
            list2Node.next = mergeTwoLists(list1, list2Node.next)
            return list2Node
        }
        // O(N+M) for both Runtime & Memory
    }
}
