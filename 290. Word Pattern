290. Word Pattern (Topics: String, Hash Table)

Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. 


Example 1:
Input: pattern = "abba", s = "dog cat cat dog"
Output: true

Example 2:
Input: pattern = "abba", s = "dog cat cat fish"
Output: false

Example 3:
Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:
1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.

----------------------

Clarifying Questions/Callouts/Notes: Does case/casing matter?

----------------------

Additional Test Cases / Edge Cases: 

Input: pattern = 'abcb'; s = 'dog cat hat cat'
Expected: true

----------------------

Swift:
class Solution {
    func wordPattern(_ pattern: String, _ s: String) -> Bool {
        let wordS = s.components(separatedBy: CharacterSet.alphanumerics.inverted).filter { !$0.isEmpty } // components(separatedBy: " ")
        guard pattern.count == wordS.count else { return false }
        let letters = Array(pattern)

        // return Set(zip(letters, wordS)).count == Set(wordS).count == Set(letters).count

        var dict: [Character: String] = Dictionary<Character, String>() // [Character: String]()
        var matchedStrings = Set<String>()

        for (letter, word) in zip(letters, wordS) {
            if let match = dict[letter] {
                guard match == word else { return false }
            } else if matchedStrings.contains(word) {
                return false
            } else {
                dict[letter] = word
                matchedStrings.insert(word)
            }
        }

        return true
    }
}
