20. Valid Parentheses (Topics: String, Stack)

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

----------------------

Swift:
class Solution {
    func isValid(_ s: String) -> Bool {
        var stack = Stack<Character>()
        for parenthesis in s {
            switch parenthesis {
                case "(", "{", "[":
                    stack.push(parenthesis)
                case ")", "}", "]":
                    guard let prev = stack.pop(), checkMatchingParentheses(openP: prev, closeP: parenthesis) else {
                        return false
                    }
                default: // Should never happen
                    return false
            }
        }
        guard stack.isEmpty else { return false }
        return true
    }

    func checkMatchingParentheses(openP: Character, closeP: Character) -> Bool {
        switch (openP, closeP) {
            case ("(", ")"), ("{", "}"), ("[", "]"):
                return true
            default:
                return false
        }
    }
}

public struct Stack<Element> {
    private var storage: [Element] = []
    public init() { }
    
    public init(_ elements: [Element]) {
        storage = elements
    }

    public mutating func push(_ element: Element) {
        storage.append(element)
    }
    
    @discardableResult
    public mutating func pop() -> Element? {
        storage.popLast()
    }

    public func peek() -> Element? {
        storage.last
    }
        
    public var isEmpty: Bool {
        peek() == nil
    }
}
