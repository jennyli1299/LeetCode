125. Valid Palindrome (Topics: Two Pointers, String)

A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.


Example 1:
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:
Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Example 3:
Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:
1 <= s.length <= 2 * 10^5
s consists only of printable ASCII characters.

----------------------

Clarifying Questions/Callouts/Notes: ?

----------------------

Additional Test Cases / Edge Cases: ?

----------------------

// Swift:
class Solution {
    func isPalindrome(_ s: String) -> Bool {
        // var str = s.filter{!$0.isWhitespace && "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM".contains($0)}
        let pattern = "[^A-Za-z0-9]+"
        let str = s.replacingOccurrences(of: pattern, with: "", options: [.regularExpression])
        var strArr = Array(str.lowercased())

        var beg = 0
        var end = strArr.count-1

        while beg < end {
            if strArr[beg] != strArr[end] {
                return false
            }
            beg+=1
            end-=1
        }

        return true
    }
}
