383. Ransom Note (Topics: Hash Table, String, Counting)

Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.
 

Example 1:
Input: ransomNote = "a", magazine = "b"
Output: false

Example 2:
Input: ransomNote = "aa", magazine = "ab"
Output: false

Example 3:
Input: ransomNote = "aa", magazine = "aab"
Output: true
 

Constraints:
1 <= ransomNote.length, magazine.length <= 10^5
ransomNote and magazine consist of lowercase English letters.

----------------------

Clarifying Questions/Callouts/Notes: Does casing matter? Since ransomNote and magazine both only consist of lowercase English letters, we can disregard casing for now

----------------------

Additional Test Cases / Edge Cases:

Input: ransomNote = "aa", magazine = ""
Expected: false

Input: ransomNote = "a" magazine = "a"
Expected: false

----------------------

Swift:
class Solution {
    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {
        // trivial case
        // magazine must have the same amount or more letters than ransomNote
        guard ransomNote.count <= magazine.count else { return false }
        
        var magazineDictionary = Dictionary<Character, Int>()
        // var magazineDictionary = [Character: Int]()

        for char in magazine {
            if let count = magazineDictionary[char] {
                magazineDictionary[char] = count+1
            } else {
                magazineDictionary[char] = 1
            }
        }

        for char in ransomNote {
            if let count = magazineDictionary[char], count > 0 {
                magazineDictionary[char] = count-1
            } else {
                return false
            }
        }

        return true
    }

    func canConstruct2Dict(_ ransomNote: String, _ magazine: String) -> Bool {
        guard ransomNote.count <= magazine.count else { return false }
        
        var ransomNoteDictionary = Dictionary<Character, Int>()
        var magazineDictionary = [Character: Int]()

        for char in ransomNote {
            if let count = ransomNoteDictionary[char] {
                ransomNoteDictionary[char] = count+1
            } else {
                ransomNoteDictionary[char] = 1
            }
        }

        for char in magazine {
            if let count = magazineDictionary[char] {
                magazineDictionary[char] = count+1
            } else {
                magazineDictionary[char] = 1
            }
        }

        for (char, count) in ransomNoteDictionary {
            guard let magazineCountForChar = magazineDictionary[char], magazineCountForChar >= count else {
                return false
            }
        }

        return true
    }
}
